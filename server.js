// server.js
const express = require("express");
const fetch = require("node-fetch");
const crypto = require("crypto");

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
if (!TELEGRAM_TOKEN) {
  console.error("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  process.exit(1);
}

const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
const PORT = process.env.PORT || 3000;

let users = {}; // { chatId: { sites: [], lastHashes: {}, monitoring: true } }

const app = express();
app.use(express.json());

// üì© –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app.post(`/webhook/${TELEGRAM_TOKEN}`, async (req, res) => {
  const update = req.body;
  console.log("üì© –ü—Ä–∏—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", JSON.stringify(update, null, 2));

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  if (update.callback_query) {
    const chatId = String(update.callback_query.message.chat.id);
    const action = update.callback_query.data;

    if (action === "list") {
      const list = users[chatId]?.sites || [];
      if (list.length === 0) {
        await sendTelegramMessage(chatId, "üì≠ –ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.");
      } else {
        let msg = "üìã –°–∞–π—Ç—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:\n";
        list.forEach((u, i) => (msg += `${i + 1}. ${u}\n`));
        await sendTelegramMessage(chatId, msg);
      }
    } else if (action === "stop") {
      users[chatId].monitoring = false;
      await sendTelegramMessage(chatId, "‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    } else if (action === "resume") {
      users[chatId].monitoring = true;
      await sendTelegramMessage(chatId, "‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.");
    }

    return res.sendStatus(200);
  }

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (update.message && update.message.text) {
    const chatId = String(update.message.chat.id);
    const text = update.message.text.trim();

    if (!users[chatId]) {
      users[chatId] = { sites: [], lastHashes: {}, monitoring: true };
    }

    if (text.startsWith("/monitor ")) {
      const url = text.split(" ")[1];
      if (!url) {
        await sendTelegramMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monitor <url>");
      } else if (!users[chatId].sites.includes(url)) {
        users[chatId].sites.push(url);
        users[chatId].lastHashes[url] = "";
        await sendTelegramMessage(chatId, `‚úÖ –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞: ${url}`);
      } else {
        await sendTelegramMessage(chatId, `‚ÑπÔ∏è –£–∂–µ —Å–ª–µ–∂—É –∑–∞: ${url}`);
      }
    } else if (text === "/start") {
      await sendTelegramMessage(
        chatId,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤.\n" +
          "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìã –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤", callback_data: "list" }],
              [
                { text: "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data: "stop" },
                { text: "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data: "resume" }
              ]
            ]
          }
        }
      );
    }
  }

  res.sendStatus(200);
});

// üöÄ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
  for (const chatId in users) {
    const cfg = users[chatId];
    if (!cfg.monitoring) continue;

    for (const url of cfg.sites) {
      try {
        const res = await fetch(url);
        const text = await res.text();
        const hash = crypto.createHash("md5").update(text).digest("hex");

        if (cfg.lastHashes[url] && cfg.lastHashes[url] !== hash) {
          await sendTelegramMessage(chatId, `‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ ${url}`);
        } else if (!cfg.lastHashes[url]) {
          await sendTelegramMessage(chatId, `üîç –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${url}`);
        }

        cfg.lastHashes[url] = hash;
      } catch (err) {
        await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${url}: ${err.message}`);
      }
    }
  }
}, 30_000);

// üì© —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendTelegramMessage(chatId, text, extra = {}) {
  try {
    const res = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "HTML",
        disable_web_page_preview: true,
        ...extra
      })
    });

    const data = await res.json();
    console.log("–û—Ç–≤–µ—Ç Telegram:", data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
}


// üöÄ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
  const url = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook/${TELEGRAM_TOKEN}`;
  const res = await fetch(`${TELEGRAM_API}/setWebhook?url=${url}`);
  const data = await res.json();
  console.log("üåç Webhook –æ—Ç–≤–µ—Ç:", data);
});
