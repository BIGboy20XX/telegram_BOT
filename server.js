import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import cheerio from "cheerio";
import TelegramBot from "node-telegram-bot-api";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const TOKEN = process.env.TELEGRAM_TOKEN;
const URL = `https://api.telegram.org/bot${TOKEN}`;
const PORT = process.env.PORT || 3000;

const app = express();
app.use(bodyParser.json());

// === Telegram Bot ===
const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${process.env.RENDER_EXTERNAL_URL}/webhook/${TOKEN}`);

app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// === –ë–î (–≤ –ø–∞–º—è—Ç–∏) ===
let userSites = {}; // { chatId: [ { url, lastHash } ] }

// === –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ===
import crypto from "crypto";
function getHash(content) {
  return crypto.createHash("sha256").update(content).digest("hex");
}

// === –ó–µ—Ä–∫–∞–ª–∞ –¥–ª—è —Å–∞–π—Ç–æ–≤ ===
const RSS_MIRRORS = {
  "tumblr.com": url => {
    const u = new URL(url);
    let blogName = null;

    // –í–∞—Ä–∏–∞–Ω—Ç 1: username.tumblr.com
    if (u.hostname.endsWith(".tumblr.com")) {
      blogName = u.hostname.split(".")[0];
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 2: www.tumblr.com/blog/username
    else if (u.hostname === "www.tumblr.com" && u.pathname.startsWith("/blog/")) {
      blogName = u.pathname.split("/")[2];
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 3: www.tumblr.com/username
    else if (u.hostname === "www.tumblr.com" && u.pathname.split("/")[1]) {
      blogName = u.pathname.split("/")[1];
    }

    if (!blogName) return [];

    return [
      `https://${blogName}.tumblr.com/rss`,
      `https://rsshub.app/tumblr/blog/${blogName}`
    ];
  }
};

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ ===
async function checkSite(url) {
  try {
    console.log(`üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${url}`);

    // –ï—Å–ª–∏ –µ—Å—Ç—å RSS-–∑–µ—Ä–∫–∞–ª–∞
    for (const domain in RSS_MIRRORS) {
      if (url.includes(domain)) {
        const mirrors = RSS_MIRRORS[domain](url);
        for (const m of mirrors) {
          try {
            const r = await fetch(m, { timeout: 10000 });
            if (r.ok) {
              const text = await r.text();
              return getHash(text.slice(0, 10000));
            } else {
              console.log(`‚ö†Ô∏è –ó–µ—Ä–∫–∞–ª–æ ${m} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: Status code ${r.status}`);
            }
          } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–µ—Ä–∫–∞–ª–µ ${m}: ${e.message}`);
          }
        }
      }
    }

    // –ï—Å–ª–∏ RSS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø–∞—Ä—Å–∏–º HTML
    const res = await fetch(url, { timeout: 10000 });
    if (!res.ok) {
      console.log(`‚ö†Ô∏è –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${url}: Status ${res.status}`);
      return null;
    }

    const html = await res.text();
    const $ = cheerio.load(html);
    const content = $("body").text().slice(0, 10000);
    return getHash(content);
  } catch (err) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${url}: ${err.message}`);
    return null;
  }
}

// === –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ ===
async function checkUpdates() {
  for (const chatId in userSites) {
    for (const site of userSites[chatId]) {
      const newHash = await checkSite(site.url);
      if (newHash && site.lastHash && newHash !== site.lastHash) {
        bot.sendMessage(chatId, `‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ: ${site.url}`);
      }
      if (newHash) site.lastHash = newHash;
    }
  }
}
setInterval(checkUpdates, 120000);

// === –ö–æ–º–∞–Ω–¥—ã ===
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  userSites[chatId] = [];
  bot.sendMessage(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤.\n\n–ö–æ–º–∞–Ω–¥—ã:\n" +
      "/add <url> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç\n" +
      "/list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤\n" +
      "/remove <url> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç\n" +
      "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã –≤—Ä—É—á–Ω—É—é"
  );
});

bot.onText(/\/add (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const url = match[1];
  if (!userSites[chatId]) userSites[chatId] = [];
  const hash = await checkSite(url);
  userSites[chatId].push({ url, lastHash: hash });
  bot.sendMessage(chatId, `‚úÖ –°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${url}`);
});

bot.onText(/\/list/, msg => {
  const chatId = msg.chat.id;
  const sites = userSites[chatId] || [];
  if (sites.length === 0) {
    bot.sendMessage(chatId, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.");
  } else {
    const list = sites.map((s, i) => `${i + 1}. ${s.url}`).join("\n");
    bot.sendMessage(chatId, `üìÑ –¢–≤–æ–∏ —Å–∞–π—Ç—ã:\n${list}`);
  }
});

bot.onText(/\/remove (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const url = match[1];
  userSites[chatId] = (userSites[chatId] || []).filter(s => s.url !== url);
  bot.sendMessage(chatId, `üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å–∞–π—Ç: ${url}`);
});

bot.onText(/\/check/, async msg => {
  const chatId = msg.chat.id;
  const sites = userSites[chatId] || [];
  if (sites.length === 0) {
    bot.sendMessage(chatId, "‚ùå –ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.");
    return;
  }

  for (const site of sites) {
    const newHash = await checkSite(site.url);
    if (newHash && site.lastHash && newHash !== site.lastHash) {
      bot.sendMessage(chatId, `‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ: ${site.url}`);
    } else {
      bot.sendMessage(chatId, `‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${site.url}`);
    }
    if (newHash) site.lastHash = newHash;
  }
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

