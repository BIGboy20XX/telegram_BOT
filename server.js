// server.js
const express = require("express");
const fetch = require("node-fetch");
const crypto = require("crypto");
const { Pool } = require("pg");
const cheerio = require("cheerio"); // üëà –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
if (!TELEGRAM_TOKEN) {
  console.error("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  process.exit(1);
}

const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
const PORT = process.env.PORT || 3000;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const app = express();
app.use(express.json());

// üì© –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
app.post(`/webhook/${TELEGRAM_TOKEN}`, async (req, res) => {
  const update = req.body;
  console.log("üì© –ü—Ä–∏—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", JSON.stringify(update, null, 2));

  if (update.message && update.message.text) {
    const chatId = String(update.message.chat.id);
    const text = update.message.text.trim();

    // üü¢ –∫–Ω–æ–ø–∫–∏
    if (text === "/start") {
      await pool.query(
        "INSERT INTO users (chat_id, monitoring) VALUES ($1,true) ON CONFLICT (chat_id) DO NOTHING",
        [chatId]
      );

      await sendTelegramMessage(
        chatId,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          reply_markup: {
            keyboard: [
              [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç" }, { text: "üìã –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤" }],
              [{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }],
              
             [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å" }]
            ],
            resize_keyboard: true
          }
        }
      );
    }
    else if (text === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç") {
      await sendTelegramMessage(chatId, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç, –Ω–∞–ø–∏—à–∏:\n/monitor <url> [selector=<css-—Å–µ–ª–µ–∫—Ç–æ—Ä>]");
    }
    else if (text === "üìã –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤") {
      const result = await pool.query("SELECT * FROM sites WHERE chat_id=$1", [chatId]);
      if (result.rows.length === 0) {
        await sendTelegramMessage(chatId, "–°–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /monitor <url>");
      } else {
        let msg = "üìã –°–∞–π—Ç—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:\n";
        for (const [i, row] of result.rows.entries()) {
          const time = row.last_update
            ? new Date(row.last_update).toLocaleString("ru-RU", { timeZone: "Asia/Almaty" })
            : "‚Äî";
          msg += `${i + 1}. ${row.url} ${row.selector ? `(—Å–µ–ª–µ–∫—Ç–æ—Ä: ${row.selector})` : ""} (–ø–æ—Å–ª. –∏–∑–º: ${time})\n`;
        }
        await sendTelegramMessage(chatId, msg);
      }
    }
    else if (text === "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è") {
      await checkUpdates(chatId);
    }
    else if (text === "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥") {
      await pool.query("UPDATE users SET monitoring=false WHERE chat_id=$1", [chatId]);
      await sendTelegramMessage(chatId, "‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }
    else if (text === "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥") {
      await pool.query("UPDATE users SET monitoring=true WHERE chat_id=$1", [chatId]);
      await sendTelegramMessage(chatId, "‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.");
    }
    else if (text === "‚ÑπÔ∏è –ü–æ–º–æ—â—å") {
      await sendTelegramMessage(
        chatId,
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
        "/monitor <url> ‚Äî –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π\n" +
        "/monitor <url> selector=<css> ‚Äî —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–ª–æ–∫–æ–º\n" +
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤\n" +
        "/remove <–Ω–æ–º–µ—Ä|url> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç\n" +
        "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
      );
    }
    else if (text.startsWith("/monitor ")) {
      const parts = text.split(" ");
      const url = parts[1];
      let selector = null;

      const selectorArg = parts.find(p => p.startsWith("selector="));
      if (selectorArg) {
        selector = selectorArg.replace("selector=", "").trim();
      }

      if (!url) {
        await sendTelegramMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monitor <url> [selector=<css-—Å–µ–ª–µ–∫—Ç–æ—Ä>]");
      } else {
        await pool.query(
          "INSERT INTO sites (chat_id, url, selector, last_hash, last_update) VALUES ($1,$2,$3,'',NOW()) ON CONFLICT DO NOTHING",
          [chatId, url, selector]
        );
        await sendTelegramMessage(chatId, `‚úÖ –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞: <b>${url}</b>${selector ? ` (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})` : ""}`);
      }
    }
    else if (text.startsWith("/remove ")) {
      const param = text.split(" ")[1];
      const result = await pool.query("SELECT * FROM sites WHERE chat_id=$1", [chatId]);
      let removed = false;

      if (/^\d+$/.test(param)) {
        const idx = parseInt(param, 10) - 1;
        if (result.rows[idx]) {
          await pool.query("DELETE FROM sites WHERE id=$1", [result.rows[idx].id]);
          removed = true;
        }
      } else {
        const row = result.rows.find(r => r.url === param);
        if (row) {
          await pool.query("DELETE FROM sites WHERE id=$1", [row.id]);
          removed = true;
        }
      }
      await sendTelegramMessage(chatId, removed ? "‚úÖ –£–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
  }

  res.sendStatus(200);
});

// üîç —Ñ—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function checkUpdates(chatId) {
  const sites = await pool.query("SELECT * FROM sites WHERE chat_id=$1", [chatId]);
  if (sites.rows.length === 0) {
    await sendTelegramMessage(chatId, "–ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /monitor <url>");
    return;
  }

  for (const site of sites.rows) {
    try {
      const res = await fetch(site.url);
      const html = await res.text();
      let content;

      if (site.selector) {
        const $ = cheerio.load(html);
        content = $(site.selector).text();
      } else {
        const $ = cheerio.load(html);
        content = $("body").text(); // üëà —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
      }

      const hash = crypto.createHash("md5").update(content).digest("hex");

      if (site.last_hash && site.last_hash !== hash) {
        const now = new Date();
        const formatted = now.toLocaleString("ru-RU", { timeZone: "Asia/Almaty" });
        await sendTelegramMessage(
          chatId,
          `‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ <b>${site.url}</b>\nüïí –í—Ä–µ–º—è: ${formatted}`
        );
        await pool.query(
          "UPDATE sites SET last_hash=$1, last_update=NOW() WHERE id=$2",
          [hash, site.id]
        );
      } else if (!site.last_hash) {
        const now = new Date();
        await sendTelegramMessage(chatId, `üîç –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>${site.url}</b>`);
        await pool.query(
          "UPDATE sites SET last_hash=$1, last_update=$2 WHERE id=$3",
          [hash, now, site.id]
        );
      } else {
        await sendTelegramMessage(chatId, `‚úÖ –ù–∞ <b>${site.url}</b> –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.`);
      }
    } catch (err) {
      await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ <b>${site.url}</b>: ${err.message}`);
    }
  }
}

// üì© –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendTelegramMessage(chatId, text, extra = {}) {
  try {
    const res = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "HTML",
        disable_web_page_preview: true,
        ...extra
      })
    });

    const data = await res.json();
    console.log("–û—Ç–≤–µ—Ç Telegram:", data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
}

// üöÄ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  const url = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook/${TELEGRAM_TOKEN}`;
  const res = await fetch(`${TELEGRAM_API}/setWebhook?url=${url}`);
  const data = await res.json();
  console.log("üåç Webhook –æ—Ç–≤–µ—Ç:", data);
});
