// monitor.js (CommonJS, node-fetch@2)
const fetch = require("node-fetch");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN; // <-- –ø–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;

const USERS_FILE = path.join(__dirname, "users.json");
const CHECK_INTERVAL_MS = 30_000; // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (30s)
const UPDATES_POLL_MS = 2000; // –∫–∞–∫ —á–∞—Å—Ç–æ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å getUpdates

// –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ users
function loadUsers() {
  try {
    if (fs.existsSync(USERS_FILE)) {
      return JSON.parse(fs.readFileSync(USERS_FILE, "utf8"));
    }
  } catch (e) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å users.json:", e.message);
  }
  return {}; // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: users[chatId] = { sites: [url,...], lastHashes: {url:hash}, monitoring: true }
}

function saveUsers(users) {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), "utf8");
  } catch (e) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å users.json:", e.message);
  }
}

let users = loadUsers();

// –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Telegram
async function sendTelegramMessage(chatId, message) {
  const apiUrl = `${TELEGRAM_API}/sendMessage`;
  try {
    const res = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        disable_web_page_preview: true
      })
    });
    const data = await res.json();
    if (!data.ok) {
      console.error("–û—à–∏–±–∫–∞ Telegram –¥–ª—è", chatId, data);
      // –µ—Å–ª–∏ —á–∞—Ç —É–¥–∞–ª—ë–Ω/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ users
      const code = data.error_code;
      const desc = (data.description || "").toLowerCase();
      if (code === 403 || desc.includes("chat was deleted") || desc.includes("bot was blocked") || desc.includes("chat not found")) {
        console.log(`–£–¥–∞–ª—è—é —á–∞—Ç ${chatId} –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî Telegram –≤–µ—Ä–Ω—É–ª: ${data.description}`);
        if (users[chatId]) {
          delete users[chatId];
          saveUsers(users);
        }
      }
    } else {
      // –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å data.result.message_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", err.message);
  }
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUpdates() {
  const chatIds = Object.keys(users);
  if (chatIds.length === 0) {
    // console.log("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.");
    return;
  }

  for (const chatId of chatIds) {
    const cfg = users[chatId];
    if (!cfg || !cfg.monitoring) continue;
    if (!Array.isArray(cfg.sites) || cfg.sites.length === 0) continue;

    for (const url of cfg.sites.slice()) { // slice —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      try {
        const res = await fetch(url, { timeout: 15000 });
        const text = await res.text();
        const hash = crypto.createHash("md5").update(text).digest("hex");

        const prev = cfg.lastHashes && cfg.lastHashes[url] ? cfg.lastHashes[url] : null;
        if (prev && prev !== hash) {
          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${url} (chat ${chatId})`);
          await sendTelegramMessage(chatId, `‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ <b>${url}</b>`);
        } else if (!prev) {
          await sendTelegramMessage(chatId, `üîç –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>${url}</b>`);
        }
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à
        cfg.lastHashes = cfg.lastHashes || {};
        cfg.lastHashes[url] = hash;
        saveUsers(users);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${url} –¥–ª—è ${chatId}:`, err.message);
        // —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –µ—Å–ª–∏ —á–∞—Ç —É–¥–∞–ª—ë–Ω ‚Äî sendTelegramMessage —Å–∞–º —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å—å
        await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ <b>${url}</b>: ${err.message}`);
      }
    }
  }
}

// —Å–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ getUpdates (–ø—Ä–æ—Å—Ç–æ–π polling)
async function listenCommands() {
  let offset = 0;
  setInterval(async () => {
    try {
      const res = await fetch(`${TELEGRAM_API}/getUpdates?offset=${offset + 1}&timeout=0`);
      const data = await res.json();
      if (!data.ok) {
        console.error("getUpdates error:", data);
        return;
      }
      if (!Array.isArray(data.result) || data.result.length === 0) return;

      for (const update of data.result) {
        offset = Math.max(offset, update.update_id);
        // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (update.message && update.message.text) {
          const chatId = String(update.message.chat.id);
          const fromUser = update.message.from && update.message.from.username ? update.message.from.username : (update.message.from && update.message.from.first_name ? update.message.from.first_name : "user");
          const text = update.message.text.trim();

          console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç ${fromUser} (chat ${chatId}): ${text}`);

          // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (!users[chatId]) {
            users[chatId] = { sites: [], lastHashes: {}, monitoring: true };
          }

          if (text.startsWith("/monitor ")) {
            const parts = text.split(" ");
            const url = parts[1];
            if (!url) {
              await sendTelegramMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monitor <url>");
              continue;
            }
            // –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!users[chatId].sites.includes(url)) {
              users[chatId].sites.push(url);
              users[chatId].lastHashes[url] = "";
              saveUsers(users);
              await sendTelegramMessage(chatId, `‚úÖ –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞: <b>${url}</b>`);
            } else {
              await sendTelegramMessage(chatId, `‚ÑπÔ∏è –£–∂–µ —Å–ª–µ–∂—É –∑–∞: <b>${url}</b>`);
            }
          } else if (text === "/list") {
            const list = users[chatId].sites;
            if (!list || list.length === 0) {
              await sendTelegramMessage(chatId, "–°–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /monitor <url>");
            } else {
              let msg = "–°–∞–π—Ç—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:\n";
              list.forEach((u, i) => (msg += `${i + 1}. ${u}\n`));
              await sendTelegramMessage(chatId, msg);
            }
          } else if (text.startsWith("/remove ")) {
            const param = text.split(" ")[1];
            if (!param) {
              await sendTelegramMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove <–Ω–æ–º–µ—Ä_–∏–∑_list> –∏–ª–∏ /remove <url>");
              continue;
            }
            const list = users[chatId].sites;
            let removed = false;
            // –µ—Å–ª–∏ —á–∏—Å–ª–æ ‚Äî —É–¥–∞–ª—è–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if (/^\d+$/.test(param)) {
              const idx = parseInt(param, 10) - 1;
              if (list[idx]) {
                const url = list.splice(idx, 1)[0];
                if (users[chatId].lastHashes) delete users[chatId].lastHashes[url];
                removed = true;
              }
            } else {
              const idx = list.indexOf(param);
              if (idx !== -1) {
                list.splice(idx, 1);
                if (users[chatId].lastHashes) delete users[chatId].lastHashes[param];
                removed = true;
              }
            }
            saveUsers(users);
            await sendTelegramMessage(chatId, removed ? "‚úÖ –£–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ");
          } else if (text === "/stop") {
            users[chatId].monitoring = false;
            saveUsers(users);
            await sendTelegramMessage(chatId, "‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.");
          } else if (text === "/resume") {
            users[chatId].monitoring = true;
            saveUsers(users);
            await sendTelegramMessage(chatId, "‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.");
          } else if (text === "/start") {
            await sendTelegramMessage(chatId,
              "üëã –ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã:\n" +
              "/monitor <url> ‚Äî –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π\n" +
              "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤\n" +
              "/remove <–Ω–æ–º–µ—Ä|url> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n" +
              "/stop ‚Äî –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n" +
              "/resume ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            );
          }
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ listenCommands:", err.message);
    }
  }, UPDATES_POLL_MS);
}

// –∑–∞–ø—É—Å–∫
console.log("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω...");
listenCommands();
setInterval(checkUpdates, CHECK_INTERVAL_MS);
